{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Semantic Language",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#module"
        },
        {
            "include": "#types"
        },
        {
            "include": "#modifiers"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.semanticlanguage"
                },
                {
                    "begin": "//",
                    "end": "\\n",
                    "name": "comment.line.semanticlanguage"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                }
            ],
            "repository": {
                "strings": {
                    "name": "string.quoted.double.semanticlanguage",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.semanticlanguage",
                            "match": "\\\\."
                        }
                    ]
                },
                "numbers": {
                    "patterns": [
                        {
                            "name": "constant.numeric.decimal.semanticlanguage",
                            "match": "\\b[0-9_]+(e|E)[0-9_]\\b"
                        },
                        {
                            "name": "constant.numeric.decimal.semanticlanguage",
                            "match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?\\b"
                        },
                        {
                            "name": "constant.numeric.decimal.semanticlanguage",
                            "match": "\\b[0-9_]\\b"
                        }
                    ]
                }
            }
        },
        "modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.semanticlanguage",
                    "match": "\\b(public|private|const|readonly)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "include": "#primitive"
                },
                {
                    "include": "#array"
                }
            ],
            "repository": {
                "primitive": {
                    "patterns": [
                        {
                            "match": "\\b(integer|real|boolean|character|class|pointer|string)\\b",
                            "name": "storage.type.primitive.semanticlanguage"
                        }
                    ]
                },
                "array": {
                    "patterns": [
                        {
                            "match": "\\b(array)\\b",
                            "name": "storage.type.array.semanticlanguage"
                        }
                    ]
                }
            }
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.semanticlanguage",
                    "match": "\\b(if|while|elseif|else|repeat|then|do)\\b"
                },
                {
                    "name": "keyword.iofunc.semanticlanguage",
                    "match": "\\b(input|output)\\b"
                },
                {
                    "name": "keyword.functions.semanticlanguage",
                    "match": "\\b(val|ref|function|procedure|call|return)\\b"
                },
                {
                    "name": "keyword.oop.semanticlanguage",
                    "match": "\\b(abstract|override|empty|inherit|base)\\b"
                },
                {
                    "name": "keyword.other.semanticlanguage",
                    "match": "\\b(nil|true|false|module|import|end|start|let|variable|new|from)\\b"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "match": "(import)\\s+([a-zA-Z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.import.semanticlanguage"
                        },
                        "2": {
                            "name": "entity.name.type.module.semanticlanguage"
                        }
                    }
                }
            ]
        },
        "module": {
            "patterns": [
                {
                    "match": "(module)\\s+([a-zA-Z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.import.semanticlanguage"
                        },
                        "2": {
                            "name": "entity.name.type.module.semanticlanguage"
                        }
                    }
                },
                {
                    "match": "(end)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.import.semanticlanguage"
                        },
                        "2": {
                            "name": "entity.name.type.module.semanticlanguage"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.semlang"
}